
/* temp_subscriber.cxx

A subscription example

This file is derived from code automatically generated by the rtiddsgen 
command:

rtiddsgen -language C++ -example <arch> temp.idl

Example subscription of type temp_msg automatically generated by 
'rtiddsgen'. To test them follow these steps:

(1) Compile this file and the example publication.

(2) Start the subscription with the command
objs/<arch>/temp_subscriber <domain_id> <sample_count>

(3) Start the publication with the command
objs/<arch>/temp_publisher <domain_id> <sample_count>

(4) [Optional] Specify the list of discovery initial peers and 
multicast receive addresses via an environment variable or a file 
(in the current working directory) called NDDS_DISCOVERY_PEERS. 

You can run any number of publishers and subscribers programs, and can 
add and remove them dynamically from the domain.

Example:

To run the example application on domain <domain_id>:

On Unix: 

objs/<arch>/temp_publisher <domain_id> 
objs/<arch>/temp_subscriber <domain_id> 

On Windows:

objs\<arch>\temp_publisher <domain_id>  
objs\<arch>\temp_subscriber <domain_id>   

*/

#include <stdio.h>
#include <stdlib.h>

#include "temp.h"
#include "tempSupport.h"
#include "ndds/ndds_cpp.h"

/* Delete all entities */
static int subscriber_shutdown(
    DDSDomainParticipant *participant)
{
    DDS_ReturnCode_t retcode;
    int status = 0;

    if (participant != NULL) {
        retcode = participant->delete_contained_entities();
        if (retcode != DDS_RETCODE_OK) {
            fprintf(stderr, "delete_contained_entities error %d\n", retcode);
            status = -1;
        }

        retcode = DDSTheParticipantFactory->delete_participant(participant);
        if (retcode != DDS_RETCODE_OK) {
            fprintf(stderr, "delete_participant error %d\n", retcode);
            status = -1;
        }
    }

    /* RTI Connext provides the finalize_instance() method on
    domain participant factory for people who want to release memory used
    by the participant factory. Uncomment the following block of code for
    clean destruction of the singleton. */
    /*

    retcode = DDSDomainParticipantFactory::finalize_instance();
    if (retcode != DDS_RETCODE_OK) {
        fprintf(stderr, "finalize_instance error %d\n", retcode);
        status = -1;
    }
    */
    return status;
}

extern "C" int subscriber_main(int domainId, int sample_count)
{
    DDSDomainParticipant *participant = NULL;
    DDSSubscriber *subscriber = NULL;
    DDSTopic *topic = NULL;
     
    DDSDataReader *reader = NULL;
    DDS_ReturnCode_t retcode;
    const char *type_name = NULL;
    int count = 0;
    int status = 0;
    struct DDS_Duration_t wait_timeout = {1,500000000};

    /* To customize the participant QoS, use 
    the configuration file USER_QOS_PROFILES.xml */
    participant = DDSTheParticipantFactory->create_participant(
        domainId, DDS_PARTICIPANT_QOS_DEFAULT, 
        NULL /* listener */, DDS_STATUS_MASK_NONE);
    if (participant == NULL) {
        fprintf(stderr, "create_participant error\n");
        subscriber_shutdown(participant);
        return -1;
    }

    /* To customize the subscriber QoS, use 
    the configuration file USER_QOS_PROFILES.xml */
    subscriber = participant->create_subscriber(
        DDS_SUBSCRIBER_QOS_DEFAULT, NULL /* listener */, DDS_STATUS_MASK_NONE);
    if (subscriber == NULL) {
        fprintf(stderr, "create_subscriber error\n");
        subscriber_shutdown(participant);
        return -1;
    }

    /* Register the type before creating the topic */
    type_name = temp_msgTypeSupport::get_type_name();
    retcode = temp_msgTypeSupport::register_type(
        participant, type_name);
    if (retcode != DDS_RETCODE_OK) {
        fprintf(stderr, "register_type error %d\n", retcode);
        subscriber_shutdown(participant);
        return -1;
    }

    /* To customize the topic QoS, use 
    the configuration file USER_QOS_PROFILES.xml */
    topic = participant->create_topic(
        "Example temp_msg",
        type_name, DDS_TOPIC_QOS_DEFAULT, NULL /* listener */,
        DDS_STATUS_MASK_NONE);
    if (topic == NULL) {
        fprintf(stderr, "create_topic error\n");
        subscriber_shutdown(participant);
        return -1;
    }


    /* To customize the data reader QoS, use 
    the configuration file USER_QOS_PROFILES.xml */
    reader = subscriber->create_datareader(
        topic, DDS_DATAREADER_QOS_DEFAULT, NULL,
        DDS_STATUS_MASK_ALL);
    if (reader == NULL) {
        fprintf(stderr, "create_datareader error\n");
        subscriber_shutdown(participant);
        
        return -1;
    }

	
/*Getting status of the condition*/

    DDSStatusCondition* status_condition = reader->get_statuscondition();
    if (status_condition == NULL) {
        printf("get_statuscondition error\n");
        subscriber_shutdown(participant);
        return -1;
    }
/*Enabling the status of the condition: If data is available*/

retcode = status_condition->set_enabled_statuses(
        DDS_DATA_AVAILABLE_STATUS);
    if (retcode != DDS_RETCODE_OK) {
        printf("set_enabled_statuses error\n");
        subscriber_shutdown(participant);
        return -1;
    }

//Creating a condition

DDSWaitSet* waitset = new DDSWaitSet();

//Attaching status condition

 retcode = waitset->attach_condition(status_condition);
    if (retcode != DDS_RETCODE_OK) {
        printf("attach_condition error\n");
        subscriber_shutdown(participant);
        return -1;
    }
//Narrowing the reader

    temp_msgDataReader *temp_msg_reader = 
		temp_msgDataReader::narrow(reader);
    if (temp_msg_reader == NULL) {
        printf("DataReader narrow error\n");
        return -1;
    }

    
    /* Main loop */
    for (count=0; (sample_count == 0) || (count < sample_count); ++count) {

        DDSConditionSeq active_conditions_seq;

      //Waiting on condition to become true before it expires at wait_timeout
        retcode = waitset->wait(active_conditions_seq, wait_timeout);

     //If timeout

        if (retcode == DDS_RETCODE_TIMEOUT) {
            printf("Wait timed out!! No conditions were triggered.\n");
            continue;
        } else if (retcode != DDS_RETCODE_OK) {
            printf("wait returned error: %d\n", retcode);
            break;
        }

     //Count of active conditions
        int active_conditions = active_conditions_seq.length();
        printf("Got %d active conditions\n", active_conditions);

        /* In this case, we have only a single condition, but
            if we had multiple, we would need to iterate over
            them and check which one is true.  Leaving the logic
            for the more complex case. */
        for (int i = 0; i < active_conditions; ++i) {
            
            /* Compare with Status Conditions */
            if (active_conditions_seq[i] == status_condition) {
                /* Get the status changes so we can check which status
                 * condition triggered. */

                DDS_StatusMask triggeredmask =
                        temp_msg_reader->get_status_changes();
  
                /* Subscription matched */
                if (triggeredmask & DDS_DATA_AVAILABLE_STATUS) {
                    /* Current conditions match our conditions to read data, so
                     * we can read data just like we would do in any other
                     * example. */
                    temp_msgSeq data_seq;
                    DDS_SampleInfoSeq info_seq;

                    /* Access data using read(), take(), etc.  If you fail to do 
                     * this the condition will remain true, and the WaitSet will
                     * wake up immediately - causing high CPU usage when it does 
                     * not sleep in the loop */
                    retcode = DDS_RETCODE_OK;
                    while (retcode != DDS_RETCODE_NO_DATA) {
                        retcode = temp_msg_reader->take(
                            data_seq, info_seq, DDS_LENGTH_UNLIMITED,
                            DDS_ANY_SAMPLE_STATE, DDS_ANY_VIEW_STATE,
                            DDS_ANY_INSTANCE_STATE);
                    
                        for (int j = 0; j < data_seq.length(); ++j) {
                            if (info_seq[j].valid_data) {
                                printf("Room: %d, Temperature: %d\n",data_seq[i].room,data_seq[i].temp);
                            }
                           
			else{
			    printf("Got metadata\n");
                            temp_msg dummy;
            		    
			    retcode = temp_msg_reader->get_key_value(dummy, info_seq[i].instance_handle);
            		    if (retcode != DDS_RETCODE_OK) {
                		printf("get_key_value error %d\n", retcode);
                		continue;
            	            }
	
			     if (info_seq[i].instance_state == DDS_NOT_ALIVE_NO_WRITERS_INSTANCE_STATE) {
                		printf("Instance %d has no writers\n", dummy.room);
            		     } 
			     else if (info_seq[i].instance_state == DDS_NOT_ALIVE_DISPOSED_INSTANCE_STATE) {
                		printf("Instance %d disposed\n", dummy.room);
            		     }
			     continue;
			}
		//NDDSUtility::sleep(receive_period);

                    }

                        /* Return the loaned data */
                        temp_msg_reader->return_loan(data_seq,
                                info_seq);
                    }
                }
            }
        }
    }

    /* Delete all entities */
    status = subscriber_shutdown(participant);
  

    return status;
}

int main(int argc, char *argv[])
{
    int domainId = 0;
    int sample_count = 0; /* infinite loop */

    if (argc >= 2) {
        domainId = atoi(argv[1]);
    }
    if (argc >= 3) {
        sample_count = atoi(argv[2]);
    }

    /* Uncomment this to turn on additional logging
    NDDSConfigLogger::get_instance()->
    set_verbosity_by_category(NDDS_CONFIG_LOG_CATEGORY_API, 
    NDDS_CONFIG_LOG_VERBOSITY_STATUS_ALL);
    */

    return subscriber_main(domainId, sample_count);
}

